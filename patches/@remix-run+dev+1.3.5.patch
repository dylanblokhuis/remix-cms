diff --git a/node_modules/@remix-run/dev/compiler.js b/node_modules/@remix-run/dev/compiler.js
index 2dd6865..56783b3 100644
--- a/node_modules/@remix-run/dev/compiler.js
+++ b/node_modules/@remix-run/dev/compiler.js
@@ -34,7 +34,7 @@ var serverEntryModulePlugin = require('./compiler/plugins/serverEntryModulePlugi
 var serverRouteModulesPlugin = require('./compiler/plugins/serverRouteModulesPlugin.js');
 var fs = require('./compiler/utils/fs.js');
 
-function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
+function _interopDefaultLegacy(e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
 
 function _interopNamespace(e) {
   if (e && e.__esModule) return e;
@@ -204,6 +204,14 @@ async function watch(config$1, {
   }, 100);
   let toWatch = [config$1.appDirectory];
 
+  if (config$1.watchGlobs) {
+    toWatch = toWatch.concat(config$1.watchGlobs);
+  }
+
+  if (config$1.serverDependenciesToBundle) {
+    toWatch.push(config$1.serverDependenciesToBundle.map(moduleName => require.resolve(moduleName).replace(/[^\/]*$/, "**")));
+  }
+
   if (config$1.serverEntryPoint) {
     toWatch.push(config$1.serverEntryPoint);
   }
@@ -244,7 +252,7 @@ async function watch(config$1, {
     }
   });
   return async () => {
-    await watcher.close().catch(() => {});
+    await watcher.close().catch(() => { });
     disposeBuilders();
   };
 }
diff --git a/node_modules/@remix-run/dev/config.d.ts b/node_modules/@remix-run/dev/config.d.ts
index df065bd..76a4a2d 100644
--- a/node_modules/@remix-run/dev/config.d.ts
+++ b/node_modules/@remix-run/dev/config.d.ts
@@ -108,6 +108,10 @@ export interface AppConfig {
      * in a CJS build.
      */
     serverDependenciesToBundle?: Array<string | RegExp>;
+    /**
+     * An array of paths to watch for changes.
+     */
+    watchGlobs?: string[];
 }
 /**
  * Fully resolved configuration object we use throughout Remix.
diff --git a/node_modules/@remix-run/dev/config.js b/node_modules/@remix-run/dev/config.js
index 4350a0a..15074d5 100644
--- a/node_modules/@remix-run/dev/config.js
+++ b/node_modules/@remix-run/dev/config.js
@@ -20,7 +20,7 @@ var routesConvention = require('./config/routesConvention.js');
 var serverModes = require('./config/serverModes.js');
 var virtualModules = require('./compiler/virtualModules.js');
 
-function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
+function _interopDefaultLegacy(e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
 
 function _interopNamespace(e) {
   if (e && e.__esModule) return e;
@@ -159,7 +159,8 @@ async function readConfig(remixRoot, serverMode = serverModes.ServerMode.Product
 
     for (let key of Object.keys(conventionalRoutes)) {
       let route = conventionalRoutes[key];
-      routes$1[route.id] = { ...route,
+      routes$1[route.id] = {
+        ...route,
         parentId: route.parentId || "root"
       };
     }
@@ -170,7 +171,8 @@ async function readConfig(remixRoot, serverMode = serverModes.ServerMode.Product
 
     for (let key of Object.keys(manualRoutes)) {
       let route = manualRoutes[key];
-      routes$1[route.id] = { ...route,
+      routes$1[route.id] = {
+        ...route,
         parentId: route.parentId || "root"
       };
     }
@@ -197,6 +199,7 @@ async function readConfig(remixRoot, serverMode = serverModes.ServerMode.Product
     serverBuildTargetEntryModule,
     serverEntryPoint: customServerEntryPoint,
     serverDependenciesToBundle,
+    watchGlobs: appConfig.watchGlobs || [],
     mdx
   };
 }
